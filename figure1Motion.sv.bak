module figure1Motion(
	input Clk,                // 50 MHz clock
         Reset,              // Active-high reset signal
         frame_clk,          // The clock indicating a new frame (~60Hz)
	//input logic   figure1_exist,
	input [7:0]   keycode,
   input [9:0]   DrawX, DrawY,       // Current pixel coordinates
	
	//input logic [9:0] DrawX, DrawY,
	//input logic [9:0] figure1_x,
	//input logic [9:0] figure1_y,
	input logic [5:0] figure1_state,
	output logic [2:0] figure1_data,
   output logic  is_figure1             // Whether current pixel belongs to figure1 or background
);



	parameter [9:0] figure1_X_Start = 10'd320;  // Start X position
   parameter [9:0] figure1_Y_Start = 10'd240;  // Start Y position
	// motion range
   parameter [9:0] figure1_X_Min = 10'd0;       // Leftmost point on the X axis
   parameter [9:0] figure1_X_Max = 10'd320;     // Rightmost point on the X axis	
   parameter [9:0] figure1_Y_Min = 10'd80;       // Topmost point on the Y axis
   parameter [9:0] figure1_Y_Max = 10'd380;     // Bottommost point on the Y axis
	// motion step
   parameter [9:0] figure1_X_Step = 10'd1;      // Step size on the X axis
   parameter [9:0] figure1_Y_Step = 10'd1;      // Step size on the Y axis
	
    logic [9:0] figure1_X_Pos, figure1_X_Motion, figure1_Y_Pos, figure1_Y_Motion;
    logic [9:0] figure1_X_Pos_in, figure1_X_Motion_in, figure1_Y_Pos_in, figure1_Y_Motion_in;


//////// Do not modify the always_ff blocks. ////////
    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
    // Update registers
    always_ff @ (posedge Clk)
    begin
        if (Reset) // back to original place and don't move
        begin
            figure1_X_Pos <= figure1_X_Start;
            figure1_Y_Pos <= figure1_Y_Start;
            figure1_X_Motion <= 10'd0;
            figure1_Y_Motion <= figure1_Y_Step;
        end
        else
        begin
            figure1_X_Pos <= figure1_X_Pos_in;
            figure1_Y_Pos <= figure1_Y_Pos_in;
            figure1_X_Motion <= figure1_X_Motion_in;
            figure1_Y_Motion <= figure1_Y_Motion_in;
        end
    end
    //////// Do not modify the always_ff blocks. ////////
    
    // You need to modify always_comb block.	 
	 
	 always_comb
    begin
			//state = 10'd0; //figure1_state;
        // By default, keep motion and position unchanged
        figure1_X_Pos_in = figure1_X_Pos;
        figure1_Y_Pos_in = figure1_Y_Pos;
        figure1_X_Motion_in = figure1_X_Motion;
        figure1_Y_Motion_in = figure1_Y_Motion;
		   
        // Update position and motion only at rising edge of frame clockv
        if (frame_clk_rising_edge)
        begin
            // Be careful when using comparators with "logic" datatype because compiler treats 
            //   both sides of the operator as UNSIGNED numbers.
            // e.g. figure1_Y_Pos - figure1_Size <= figure1_Y_Min 
            // If figure1_Y_Pos is 0, then figure1_Y_Pos - figure1_Size will not be -4, but rather a large positive number.
			 unique case(keycode)
			 8'h04: // A: Go left
				begin
				 figure1_X_Motion_in = (~(figure1_X_Step) + 1'b1);
				 figure1_Y_Motion_in = 10'h000;
				end 
			 8'h07: // D: Go right
				begin
				 figure1_X_Motion_in = figure1_X_Step;
				 figure1_Y_Motion_in = 10'h000;
				end
			 8'h1a: // W: Jump not use now
				begin
				 figure1_Y_Motion_in = (~(figure1_Y_Step) + 1'b1);
				 figure1_X_Motion_in = 10'h000;
				end
			 8'h16: // S: Bat not use now
				begin
				 figure1_Y_Motion_in = figure1_Y_Step;
				 figure1_X_Motion_in = 10'h000;
				end
			 default:
				begin
//				 figure1_Y_Motion_in = 10'h000;
//				 figure1_X_Motion_in = 10'h000;
				end			 
			 endcase

//			// if at edge,  figure cannot move
//         if( figure1_X_Pos + (FrameX-CenterX) >= figure1_X_Max )  // figure1 is at the right edge, can't move.
//				begin
//              figure1_X_Motion_in = 10'h000;  
//              figure1_Y_Motion_in = 10'h000; 
//				end
//
//         else if ( figure1_X_Pos - CenterX <= figure1_X_Min )  // figure1 is at the left edge, can't move.
//				begin
//              figure1_X_Motion_in = 10'h000;
//              figure1_Y_Motion_in = 10'h000; 
//				end 

        
            // Update the figure1's position with its motion
            figure1_X_Pos_in = figure1_X_Pos + figure1_X_Motion;
            figure1_Y_Pos_in = figure1_Y_Pos + figure1_Y_Motion;
        end
    end